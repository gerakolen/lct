--- DDL
CREATE TABLE flights.public.flights ( flightdate date, airline varchar, origin varchar, dest varchar, cancelled boolean, diverted boolean, crsdeptime integer, deptime double, depdelayminutes double, depdelay double, arrtime double, arrdelayminutes double, airtime double, crselapsedtime double, actualelapsedtime double, distance double, year integer, quarter integer, month integer, dayofmonth integer, dayofweek integer, marketing_airline_network varchar, operated_or_branded_code_share_partners varchar, dot_id_marketing_airline integer, iata_code_marketing_airline varchar, flight_number_marketing_airline integer, operating_airline varchar, dot_id_operating_airline integer, iata_code_operating_airline varchar, tail_number varchar, flight_number_operating_airline integer, originairportid integer, originairportseqid integer, origincitymarketid integer, origincityname varchar, originstate varchar, originstatefips integer, originstatename varchar, originwac integer, destairportid integer, destairportseqid integer, destcitymarketid integer, destcityname varchar, deststate varchar, deststatefips integer, deststatename varchar, destwac integer, depdel15 double, departuredelaygroups double, deptimeblk varchar, taxiout double, wheelsoff double, wheelson double, taxiin double, crsarrtime integer, arrdelay double, arrdel15 double, arrivaldelaygroups double, arrtimeblk varchar, distancegroup integer, divairportlandings double ) WITH ( format = 'PARQUET', format_version = 2 );

--- Queries
WITH MonthlyFlightCounts AS ( SELECT Origin, month(FlightDate) AS Month, COUNT(*) AS TotalFlights FROM flights.public.flights GROUP BY Origin, month(FlightDate) ORDER BY Month DESC, TotalFlights DESC ), TopAirportsByMonth AS ( SELECT Month, Origin, TotalFlights, RANK() OVER (PARTITION BY Month ORDER BY TotalFlights DESC) AS AirportRank FROM MonthlyFlightCounts ), FilteredFlights AS ( SELECT f.*, CASE WHEN f.DepTimeBlk IN ('0600-0659', '0700-0759', '0800-0859', '1600-1659', '1700-1759', '1800-1859') THEN 'Peak' ELSE 'Off-Peak' END AS TimeOfDay FROM flights.public.flights f JOIN TopAirportsByMonth t ON f.Origin = t.Origin AND month(f.FlightDate) = t.Month WHERE f.Cancelled = false AND f.Diverted = false AND t.AirportRank <= 10 ) SELECT ff.Month, Origin, TimeOfDay, COUNT(*) AS TotalFlights, ROUND(AVG(TaxiOut), 2) AS AvgTaxiOut, ROUND(AVG(DepDelay), 2) AS AvgDEPDelay, ROUND(AVG(ArrDelay), 2) AS AvgARRDelay, ROUND(CORR(TaxiOut, DepDelay), 2) AS TaxiOut_DepDelay_Correlation, ROUND(CORR(TaxiOut, ArrDelay), 2) AS TaxiOut_ArrDelay_Correlation, SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND( (SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2 ) AS PercentDelayed FROM FilteredFlights ff GROUP BY ff.Month, Origin, TimeOfDay ORDER BY ff.Month DESC, Origin, TimeOfDay;
WITH AirportDiscrepancy AS ( SELECT Origin AS Airport, OriginCityName AS AirportCity, OriginState AS AirportState, 'Origin' AS AirportRole, COUNT(*) AS TotalFlights, AVG(ActualElapsedTime - CRSElapsedTime) AS AvgDiscrepancy, AVG(DepDelay) AS AvgDepDelay, AVG(DepDelayMinutes) AS AvgDepDelayMinutes, AVG(TaxiOut) AS AvgTaxiOut, AVG(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS PercentDelayedDepartures, AVG(CASE WHEN Diverted THEN 1 ELSE 0 END) AS PercentDiverted, AVG(CASE WHEN Cancelled THEN 1 ELSE 0 END) AS PercentCancelled FROM flights.public.flights WHERE CRSElapsedTime IS NOT NULL AND ActualElapsedTime IS NOT NULL AND CRSElapsedTime > 0 AND Cancelled = false GROUP BY Origin, OriginCityName, OriginState UNION ALL SELECT Dest AS Airport, DestCityName AS AirportCity, DestState AS AirportState, 'Destination' AS AirportRole, COUNT(*) AS TotalFlights, AVG(ActualElapsedTime - CRSElapsedTime) AS AvgDiscrepancy, AVG(ArrDelay) AS AvgDepDelay, AVG(ArrDelayMinutes) AS AvgDepDelayMinutes, AVG(TaxiIn) AS AvgTaxiOut, AVG(CASE WHEN ArrDel15 = 1 THEN 1 ELSE 0 END) AS PercentDelayedDepartures, AVG(CASE WHEN Diverted THEN 1 ELSE 0 END) AS PercentDiverted, AVG(CASE WHEN Cancelled THEN 1 ELSE 0 END) AS PercentCancelled FROM flights.public.flights WHERE CRSElapsedTime IS NOT NULL AND ActualElapsedTime IS NOT NULL AND CRSElapsedTime > 0 AND Cancelled = false GROUP BY Dest, DestCityName, DestState ), RankedAirports AS ( SELECT *, RANK() OVER (ORDER BY AvgDiscrepancy DESC) AS DiscrepancyRank FROM AirportDiscrepancy WHERE TotalFlights > 1000 ) SELECT Airport, AirportCity, AirportState, AirportRole, TotalFlights, ROUND(AvgDiscrepancy, 2) AS AvgDiscrepancyMinutes, ROUND(AvgDepDelay, 2) AS AvgDelayMinutes, ROUND(AvgDepDelayMinutes, 2) AS AvgDelayMinutesNonNegative, ROUND(AvgTaxiOut, 2) AS AvgTaxiTimeMinutes, ROUND(PercentDelayedDepartures * 100, 2) AS PercentDelayedFlights, ROUND(PercentDiverted * 100, 2) AS PercentDivertedFlights, ROUND(PercentCancelled * 100, 2) AS PercentCancelledFlights, DiscrepancyRank FROM RankedAirports WHERE DiscrepancyRank <= 20 ORDER BY DiscrepancyRank;
SELECT Operating_Airline AS Airline, DayOfWeek, COUNT(*) AS TotalFlights, ROUND(AVG(DepDelayMinutes), 2) AS AvgDepartureDelayMinutes, SUM(CASE WHEN DepDel15 = 0 THEN 1 ELSE 0 END) AS OnTimeFlights, ROUND((SUM(CASE WHEN DepDel15 = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS OnTimePerformancePercent FROM flights.public.flights WHERE Cancelled =false AND Diverted =false AND DepDelayMinutes IS NOT NULL GROUP BY Operating_Airline, DayOfWeek ORDER BY OnTimePerformancePercent DESC, AvgDepartureDelayMinutes ASC;
WITH MajorAirports AS ( SELECT Origin AS Airport, OriginCityName AS AirportCity, COUNT(*) AS TotalFlights FROM flights.public.flights GROUP BY Origin, OriginCityName ORDER BY TotalFlights DESC LIMIT 10 ), PeakHoursFlights AS ( SELECT f.Origin AS Airport, m.AirportCity, f.DepTimeBlk, f.TaxiOut, f.DepDelayMinutes, f.DepDel15 FROM flights.public.flights f JOIN MajorAirports m ON f.Origin = m.Airport WHERE f.Cancelled = false AND f.Diverted = false AND f.TaxiOut IS NOT NULL AND f.DepDelayMinutes IS NOT NULL AND f.DepTimeBlk IN ('0600-0659', '0700-0759', '0800-0859', '1600-1659', '1700-1759', '1800-1859') ) SELECT Airport, AirportCity, DepTimeBlk, COUNT(*) AS TotalFlights, ROUND(AVG(TaxiOut), 2) AS AvgTaxiOutMinutes, ROUND(AVG(DepDelayMinutes), 2) AS AvgDepartureDelayMinutes, ROUND(CORR(TaxiOut, DepDelayMinutes), 3) AS TaxiOut_DepDelay_Correlation, SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND((SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS PercentDelayed15Plus, ROUND(AVG(CASE WHEN TaxiOut <= 10 THEN DepDelayMinutes END), 2) AS AvgDelay_TaxiOut_0_10, ROUND(AVG(CASE WHEN TaxiOut > 10 AND TaxiOut <= 20 THEN DepDelayMinutes END), 2) AS AvgDelay_TaxiOut_11_20, ROUND(AVG(CASE WHEN TaxiOut > 20 THEN DepDelayMinutes END), 2) AS AvgDelay_TaxiOut_20Plus FROM PeakHoursFlights GROUP BY Airport, AirportCity, DepTimeBlk ORDER BY Airport, DepTimeBlk;
SELECT Origin AS Airport, OriginCityName AS AirportCity, OriginState AS AirportState, COUNT(*) AS TotalFlights, SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND((SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS PercentDelayedFlights, ROUND(AVG(DepDelay), 2) AS AvgDepartureDelayMinutes, ROUND(AVG(TaxiOut), 2) AS AvgTaxiOutMinutes FROM flights.public.flights WHERE Cancelled = false AND Diverted = FALSE AND DepDel15 IS NOT NULL AND DepDelay IS NOT NULL AND TaxiOut IS NOT NULL GROUP BY Origin, OriginCityName, OriginState HAVING COUNT(*) > 1000 ORDER BY PercentDelayedFlights DESC, AvgDepartureDelayMinutes DESC LIMIT 20;
SELECT DistanceGroup, COUNT(*) AS TotalFlights, ROUND(CORR(DepDelayMinutes, ArrDelayMinutes), 3) AS DelayCorrelation, ROUND(AVG(DepDelayMinutes), 2) AS AvgDepartureDelayMinutes, ROUND(AVG(ArrDelayMinutes), 2) AS AvgArrivalDelayMinutes, ROUND(SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentDelayedDepartures, ROUND(SUM(CASE WHEN ArrDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentDelayedArrivals FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND DepDelayMinutes IS NOT NULL AND ArrDelayMinutes IS NOT NULL AND DistanceGroup IS NOT NULL GROUP BY DistanceGroup ORDER BY DistanceGroup;
SELECT CASE WHEN Distance < 500 THEN 'Short-Haul (<500 miles)' WHEN Distance > 1500 THEN 'Long-Haul (>1500 miles)' END AS FlightCategory, DepartureDelayGroups, COUNT(*) AS FlightCount, ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (PARTITION BY CASE WHEN Distance < 500 THEN 'Short-Haul (<500 miles)' WHEN Distance > 1500 THEN 'Long-Haul (>1500 miles)' END ), 2) AS PercentageOfCategory, ROUND(AVG(DepDelayMinutes), 2) AS AvgDelayMinutes, ROUND(SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentDelayed15Plus FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND Distance IS NOT NULL AND DepartureDelayGroups IS NOT NULL AND (Distance < 500 OR Distance > 1500) GROUP BY 1, DepartureDelayGroups ORDER BY 1, DepartureDelayGroups;
WITH DistanceGroupAverages AS ( SELECT DistanceGroup, AVG(CASE WHEN ArrDel15 = 1 THEN 1.0 ELSE 0.0 END) AS AvgDelayRate FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND ArrDel15 IS NOT NULL GROUP BY DistanceGroup ), AirportDelayRates AS ( SELECT Dest AS DestinationAirport, DestCityName AS DestinationCity, DestState AS DestinationState, ArrTimeBlk AS ArrivalTimeBlock, DistanceGroup, COUNT(*) AS TotalFlights, AVG(CASE WHEN ArrDel15 = 1 THEN 1.0 ELSE 0.0 END) AS DelayRate FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND ArrDel15 IS NOT NULL GROUP BY Dest, DestCityName, DestState, ArrTimeBlk, DistanceGroup HAVING COUNT(*) > 50 ) SELECT adr.DestinationAirport, adr.DestinationCity, adr.DestinationState, adr.ArrivalTimeBlock, adr.DistanceGroup, adr.TotalFlights, ROUND(adr.DelayRate * 100, 2) AS ArrivalDelayRatePercent, ROUND(dga.AvgDelayRate * 100, 2) AS AvgDistanceGroupDelayRatePercent, ROUND((adr.DelayRate - dga.AvgDelayRate) * 100, 2) AS DelayRateDifferenceFromAverage, ROUND(AVG(ArrDelayMinutes) FILTER (WHERE ArrDel15 = 1), 2) AS AvgDelayDurationMinutes FROM AirportDelayRates adr JOIN DistanceGroupAverages dga ON adr.DistanceGroup = dga.DistanceGroup LEFT JOIN flights.public.flights f ON adr.DestinationAirport = f.Dest AND adr.ArrivalTimeBlock = f.ArrTimeBlk AND adr.DistanceGroup = f.DistanceGroup AND f.Cancelled = false AND f.Diverted = false AND f.ArrDel15 IS NOT NULL GROUP BY adr.DestinationAirport, adr.DestinationCity, adr.DestinationState, adr.ArrivalTimeBlock, adr.DistanceGroup, adr.TotalFlights, adr.DelayRate, dga.AvgDelayRate ORDER BY adr.DestinationAirport, adr.DistanceGroup, adr.ArrivalTimeBlock;
WITH DistanceGroupAverages AS ( SELECT DistanceGroup, AVG(CASE WHEN ArrDelayMinutes >= 15 THEN 1 ELSE 0 END) AS AvgDelayRate FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND ArrDelayMinutes IS NOT NULL GROUP BY DistanceGroup ), AirportDelayRates AS ( SELECT Dest AS DestinationAirport, DestCityName, DestState, ArrTimeBlk, DistanceGroup, COUNT(*) AS TotalFlights, AVG(CASE WHEN ArrDelayMinutes >= 15 THEN 1 ELSE 0 END) AS DelayRate, avg(ArrDelayMinutes) as AvgArrDelayMinutes FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND ArrDelayMinutes IS NOT NULL GROUP BY Dest, DestCityName, DestState, ArrTimeBlk, DistanceGroup HAVING COUNT(*) > 50 ) SELECT adr.DestinationAirport, adr.DestCityName AS DestinationCity, adr.DestState AS DestinationState, adr.ArrTimeBlk, adr.DistanceGroup, adr.TotalFlights, ROUND(adr.DelayRate * 100, 2) AS ArrivalDelayRatePercent, ROUND(dga.AvgDelayRate * 100, 2) AS AvgDistanceGroupDelayRatePercent, ROUND((adr.DelayRate - dga.AvgDelayRate) * 100, 2) AS DelayRateDifferenceFromAverage, ROUND(AVG(CASE WHEN AvgArrDelayMinutes >= 15 THEN AvgArrDelayMinutes END), 2) AS AvgDelayDurationMinutes FROM AirportDelayRates adr JOIN DistanceGroupAverages dga ON adr.DistanceGroup = dga.DistanceGroup GROUP BY adr.DestinationAirport, adr.DestCityName, adr.DestState, adr.ArrTimeBlk, adr.DistanceGroup, adr.TotalFlights, adr.DelayRate, dga.AvgDelayRate ORDER BY adr.DestinationAirport, adr.DistanceGroup, adr.ArrTimeBlk;
SELECT OriginCityName || ' → ' || DestCityName AS CityPair, OriginCityName, DestCityName, COUNT(*) AS TotalFlights, SUM(CASE WHEN Cancelled = True THEN 1 ELSE 0 END) AS CancelledFlights, ROUND(SUM(CASE WHEN Cancelled = True THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancellationRate, SUM(CASE WHEN Month IN (12, 1, 2) THEN 1 ELSE 0 END) AS WinterFlights, SUM(CASE WHEN Month IN (12, 1, 2) AND Cancelled = True THEN 1 ELSE 0 END) AS WinterCancelled, ROUND(SUM(CASE WHEN Month IN (12, 1, 2) AND Cancelled = True THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN Month IN (12, 1, 2) THEN 1 ELSE 0 END), 0), 2) AS WinterCancellationRate, SUM(CASE WHEN Month IN (3, 4, 5) THEN 1 ELSE 0 END) AS SpringFlights, SUM(CASE WHEN Month IN (3, 4, 5) AND Cancelled = True THEN 1 ELSE 0 END) AS SpringCancelled, ROUND(SUM(CASE WHEN Month IN (3, 4, 5) AND Cancelled = True THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN Month IN (3, 4, 5) THEN 1 ELSE 0 END), 0), 2) AS SpringCancellationRate, SUM(CASE WHEN Month IN (6, 7, 8) THEN 1 ELSE 0 END) AS SummerFlights, SUM(CASE WHEN Month IN (6, 7, 8) AND Cancelled = True THEN 1 ELSE 0 END) AS SummerCancelled, ROUND(SUM(CASE WHEN Month IN (6, 7, 8) AND Cancelled = True THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN Month IN (6, 7, 8) THEN 1 ELSE 0 END), 0), 2) AS SummerCancellationRate, SUM(CASE WHEN Month IN (9, 10, 11) THEN 1 ELSE 0 END) AS FallFlights, SUM(CASE WHEN Month IN (9, 10, 11) AND Cancelled = True THEN 1 ELSE 0 END) AS FallCancelled, ROUND(SUM(CASE WHEN Month IN (9, 10, 11) AND Cancelled = True THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN Month IN (9, 10, 11) THEN 1 ELSE 0 END), 0), 2) AS FallCancellationRate FROM flights.public.flights GROUP BY OriginCityName, DestCityName HAVING COUNT(*) > 100 ORDER BY CancellationRate DESC LIMIT 50;
WITH RoutePerformance AS ( SELECT Origin, Dest, COUNT(*) AS FlightFrequency, AVG(CASE WHEN DepDel15 = 0 THEN 1.0 ELSE 0.0 END) AS OnTimeDepartureRate, AVG(CASE WHEN ArrDel15 = 0 THEN 1.0 ELSE 0.0 END) AS OnTimeArrivalRate FROM flights.public.flights WHERE NOT Cancelled AND NOT Diverted GROUP BY Origin, Dest HAVING COUNT(*) > 100 /* Only include routes with sufficient flight volume*/ ) SELECT CORR(FlightFrequency, OnTimeDepartureRate) AS Frequency_DepartureCorrelation, CORR(FlightFrequency, OnTimeArrivalRate) AS Frequency_ArrivalCorrelation, COUNT(*) AS TotalRoutesAnalyzed, MIN(FlightFrequency) AS MinRouteFrequency, MAX(FlightFrequency) AS MaxRouteFrequency, AVG(FlightFrequency) AS AvgRouteFrequency FROM RoutePerformance;
SELECT DistanceGroup, COUNT(*) AS TotalFlights, ROUND(AVG(Distance), 2) AS AvgDistanceMiles, ROUND(AVG(AirTime), 2) AS AvgAirTimeMinutes, ROUND(AVG(AirTime / NULLIF(Distance, 0)), 4) AS AvgMinutesPerMile, ROUND(AVG(CRSElapsedTime / NULLIF(Distance, 0)), 4) AS AvgScheduledMinutesPerMile, ROUND((AVG(AirTime / NULLIF(Distance, 0)) - MIN(CASE WHEN DistanceGroup = 1 THEN AirTime / NULLIF(Distance, 0) END)) * 100.0 / MIN(CASE WHEN DistanceGroup = 1 THEN AirTime / NULLIF(Distance, 0) END), 2) AS EfficiencyDeviationFromShortest, ROUND(AVG(CRSElapsedTime - AirTime), 2) AS AvgBufferTime, ROUND(SUM(CASE WHEN AirTime > CRSElapsedTime THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentFlightsExceedingScheduledAirTime FROM flights.public.flights WHERE NOT Cancelled AND NOT Diverted AND Distance > 0 AND AirTime IS NOT NULL AND CRSElapsedTime IS NOT NULL GROUP BY DistanceGroup ORDER BY DistanceGroup;
SELECT DistanceGroup, COUNT(*) AS TotalFlights, SUM(CASE WHEN Cancelled THEN 1 ELSE 0 END) AS CancelledFlights, ROUND(SUM(CASE WHEN Cancelled THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancellationRatePercent, ROUND(AVG(Distance), 2) AS AvgDistanceMiles, ROUND(AVG(Month), 2) AS AvgMonth, ROUND(AVG(DayOfWeek), 2) AS AvgDayOfWeek FROM flights.public.flights GROUP BY DistanceGroup HAVING COUNT(*) > 100 /* Filter for statistically significant distance groups*/ ORDER BY CancellationRatePercent DESC;
WITH AirlineHubFlights AS ( /* Count flights.public.flights per airline per origin airport*/ SELECT Operating_Airline, Origin AS HubAirport, COUNT(*) AS FlightCount, /* Rank airports by flight count for each airline*/ RANK() OVER (PARTITION BY Operating_Airline ORDER BY COUNT(*) DESC) AS HubRank FROM flights.public.flights WHERE NOT Cancelled AND NOT Diverted GROUP BY Operating_Airline, Origin HAVING COUNT(*) > 100 /* Only consider airports with significant flight volume*/ ), PrimaryHubs AS ( /* Select only the primary hub for each airline (HubRank = 1)*/ SELECT Operating_Airline, HubAirport FROM AirlineHubFlights WHERE HubRank = 1 ), AirlineTaxiEfficiency AS ( /* Calculate taxi-out metrics at primary hubs*/ SELECT f.Operating_Airline, h.HubAirport, COUNT(*) AS TotalFlights, ROUND(AVG(f.TaxiOut), 2) AS AvgTaxiOut, ROUND(STDDEV(f.TaxiOut), 2) AS TaxiOutStdDev, ROUND(AVG(CASE WHEN f.DepDel15 = 0 THEN f.TaxiOut END), 2) AS AvgTaxiOutOnTime, ROUND(AVG(CASE WHEN f.DepDel15 = 1 THEN f.TaxiOut END), 2) AS AvgTaxiOutDelayed, ROUND(SUM(CASE WHEN f.DepDel15 = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS OnTimeDepartureRate FROM flights.public.flights f JOIN PrimaryHubs h ON f.Operating_Airline = h.Operating_Airline AND f.Origin = h.HubAirport WHERE NOT f.Cancelled AND NOT f.Diverted AND f.TaxiOut IS NOT NULL AND f.TaxiOut > 0 /* Filter out potentially invalid taxi-out times*/ GROUP BY f.Operating_Airline, h.HubAirport HAVING COUNT(*) > 500 /* Ensure sufficient data for reliable metrics */ ) SELECT Operating_Airline, HubAirport, TotalFlights, AvgTaxiOut, TaxiOutStdDev, AvgTaxiOutOnTime, AvgTaxiOutDelayed, OnTimeDepartureRate, /* Rank airlines by taxi-out efficiency*/ RANK() OVER (ORDER BY AvgTaxiOut ASC) AS TaxiEfficiencyRank FROM AirlineTaxiEfficiency ORDER BY TaxiEfficiencyRank;
SELECT Operating_Airline, CASE WHEN Operated_or_Branded_Code_Share_Partners IS NOT NULL AND Operated_or_Branded_Code_Share_Partners != '' AND Operated_or_Branded_Code_Share_Partners != 'NA' THEN 'Code-Share Operation' ELSE 'Regular Operation' END AS OperationType, COUNT(*) AS TotalFlights, ROUND(AVG(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) * 100, 2) AS DepartureDelayRate, ROUND(AVG(CASE WHEN ArrDel15 = 1 THEN 1 ELSE 0 END) * 100, 2) AS ArrivalDelayRate, ROUND(AVG(DepDelayMinutes), 2) AS AvgDepartureDelayMinutes, ROUND(AVG(ArrDelayMinutes), 2) AS AvgArrivalDelayMinutes, /* Additional metrics for context */ ROUND(AVG(CASE WHEN DepDel15 = 0 THEN 1 ELSE 0 END) * 100, 2) AS OnTimeDepartureRate, ROUND(AVG(CASE WHEN ArrDel15 = 0 THEN 1 ELSE 0 END) * 100, 2) AS OnTimeArrivalRate FROM flights.public.flights WHERE NOT Cancelled AND NOT Diverted AND DepDel15 IS NOT NULL AND ArrDel15 IS NOT NULL GROUP BY Operating_Airline, 2 HAVING COUNT(*) > 100 /* Filter for statistically significant samples*/ ORDER BY Operating_Airline, OperationType;
SELECT Operating_Airline, /* Categorize tail numbers by USA standard patterns */ CASE WHEN REGEXP_LIKE(Tail_Number, '^N[0-9][A-Z]{4}$') THEN 'N + 1 digit + 4 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{2}[A-Z]{3}$') THEN 'N + 2 digits + 3 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9][A-Z]{3}$') THEN 'N + 1 digit + 3 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{3}[A-Z]{2}$') THEN 'N + 3 digits + 2 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{2}[A-Z]{2}$') THEN 'N + 2 digits + 2 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{4}[A-Z]$') THEN 'N + 4 digits + 1 letter' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{3}[A-Z]$') THEN 'N + 3 digits + 1 letter' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{5}$') THEN 'N + 5 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{4}$') THEN 'N + 4 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{3}$') THEN 'N + 3 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{2}$') THEN 'N + 2 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]$') THEN 'N + 1 digit' ELSE 'Other' END AS AircraftTypeCategory, COUNT(*) AS TotalFlights, SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND(CAST(SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS DOUBLE) * 100.0 / COUNT(*), 2) AS DelayPercentage FROM flights.public.flights WHERE Tail_Number IS NOT NULL AND Operating_Airline IS NOT NULL AND DepDel15 IS NOT NULL AND (Cancelled = false OR Cancelled IS NULL) AND (Diverted = false OR Diverted IS NULL) GROUP BY Operating_Airline, CASE WHEN REGEXP_LIKE(Tail_Number, '^N[0-9][A-Z]{4}$') THEN 'N + 1 digit + 4 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{2}[A-Z]{3}$') THEN 'N + 2 digits + 3 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9][A-Z]{3}$') THEN 'N + 1 digit + 3 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{3}[A-Z]{2}$') THEN 'N + 3 digits + 2 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{2}[A-Z]{2}$') THEN 'N + 2 digits + 2 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{4}[A-Z]$') THEN 'N + 4 digits + 1 letter' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{3}[A-Z]$') THEN 'N + 3 digits + 1 letter' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{5}$') THEN 'N + 5 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{4}$') THEN 'N + 4 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{3}$') THEN 'N + 3 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{2}$') THEN 'N + 2 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]$') THEN 'N + 1 digit' ELSE 'Other' END HAVING COUNT(*) > 50 /* Filter for statistically significant samples*/ ORDER BY Operating_Airline, DelayPercentage DESC;
SELECT Operating_Airline, COUNT(*) AS TotalFlights, SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS TotalDelayedDepartures, SUM(CASE WHEN DepDel15 = 1 AND ArrDel15 = 0 THEN 1 ELSE 0 END) AS RecoveredFlights, SUM(CASE WHEN DepDel15 = 1 AND ArrDel15 = 1 THEN 1 ELSE 0 END) AS UnrecoveredFlights, ROUND( (SUM(CASE WHEN DepDel15 = 1 AND ArrDel15 = 0 THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END), 0)), 2 ) AS RecoveryRatePercent, ROUND( AVG(CASE WHEN DepDel15 = 1 THEN DepDelayMinutes END), 2 ) AS AvgDepartureDelayForDelayedFlights, ROUND( AVG(CASE WHEN DepDel15 = 1 AND ArrDel15 = 0 THEN DepDelayMinutes END), 2 ) AS AvgDepartureDelayForRecoveredFlights, ROUND( AVG(CASE WHEN DepDel15 = 1 AND ArrDel15 = 1 THEN (ArrDelayMinutes - DepDelayMinutes) END), 2 ) AS AvgDelayIncreaseDuringFlight FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND DepDel15 IS NOT NULL AND ArrDel15 IS NOT NULL GROUP BY Operating_Airline HAVING SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) > 100 /* Filter for airlines with sufficient delayed flights.public.flights */ ORDER BY RecoveryRatePercent DESC;
SELECT FlightDate, DistanceGroup, COUNT(*) AS TotalFlights, SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, /* Industry-standard passenger estimates by distance group Short-haul (DistanceGroup 1-2): ~120 passengers Medium-haul (DistanceGroup 3-4): ~150 passengers Long-haul (DistanceGroup 5+): ~180 passengers */ SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup <= 2 THEN 1 ELSE 0 END) * 120 AS EstimatedPassengersShortHaul, SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup BETWEEN 3 AND 4 THEN 1 ELSE 0 END) * 150 AS EstimatedPassengersMediumHaul, SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup >= 5 THEN 1 ELSE 0 END) * 180 AS EstimatedPassengersLongHaul, (SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup <= 2 THEN 1 ELSE 0 END) * 120 + SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup BETWEEN 3 AND 4 THEN 1 ELSE 0 END) * 150 + SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup >= 5 THEN 1 ELSE 0 END) * 180) AS TotalEstimatedAffectedPassengers, ROUND(SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS DelayRatePercentage FROM flights.public.flights WHERE Cancelled = false AND Diverted = false GROUP BY FlightDate, DistanceGroup ORDER BY FlightDate DESC, TotalEstimatedAffectedPassengers DESC;
SELECT DepTimeBlk AS DepartureTimeBlock, COUNT(*) AS TotalFlights, SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS DelayedDepartures, ROUND(AVG(CASE WHEN DepDel15 = 1 THEN DepDelay END), 2) AS AvgDepartureDelay, ROUND(AVG(CASE WHEN DepDel15 = 1 THEN ArrDelay END), 2) AS AvgArrivalDelay, ROUND(AVG(CASE WHEN DepDel15 = 1 THEN DepDelay - ArrDelay END), 2) AS AvgDelayRecoveryMinutes, ROUND(SUM(CASE WHEN DepDel15 = 1 AND ArrDelay < DepDelay THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END), 0), 2) AS PercentFlightsRecoveredTime, ROUND(AVG(CASE WHEN DepDel15 = 1 AND ArrDelay < DepDelay THEN DepDelay - ArrDelay END), 2) AS AvgMinutesRecovered, ROUND(AVG(CASE WHEN DepDel15 = 1 AND ArrDelay >= DepDelay THEN DepDelay - ArrDelay END), 2) AS AvgDelayGrowth FROM flights.public.flights WHERE NOT Cancelled AND NOT Diverted AND DepDelay IS NOT NULL AND ArrDelay IS NOT NULL AND DepTimeBlk IS NOT NULL GROUP BY DepTimeBlk ORDER BY SUBSTRING(DepTimeBlk FROM 1 FOR 2) ASC;
WITH FlightPeriods AS ( SELECT Operating_Airline, Month, DayofMonth, Cancelled, /* Define holiday periods using Month and DayofMonth fields */ CASE /* Thanksgiving period (Nov 20-30)*/ WHEN Month = 11 AND DayofMonth BETWEEN 20 AND 30 THEN 'Thanksgiving' /* Christmas/New Year period (Dec 20 - Jan 5) */ WHEN (Month = 12 AND DayofMonth >= 20) OR (Month = 1 AND DayofMonth <= 5) THEN 'Christmas_New_Year' ELSE 'Regular' END AS PeriodType FROM flights.public.flights ), CancellationRates AS ( SELECT Operating_Airline, PeriodType, COUNT(*) AS TotalFlights, SUM(CASE WHEN Cancelled = true THEN 1 ELSE 0 END) AS CancelledFlights, ROUND(SUM(CASE WHEN Cancelled = true THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancellationRate FROM FlightPeriods GROUP BY Operating_Airline, PeriodType HAVING COUNT(*) > 100 /* Filter out airlines with insufficient data*/ ), RegularRates AS ( SELECT Operating_Airline, CancellationRate AS RegularCancellationRate FROM CancellationRates WHERE PeriodType = 'Regular' ) SELECT cr.Operating_Airline, cr.PeriodType, cr.CancellationRate AS HolidayCancellationRate, rr.RegularCancellationRate, cr.CancellationRate - rr.RegularCancellationRate AS RateDifference, ROUND((cr.CancellationRate - rr.RegularCancellationRate) * 100.0 / NULLIF(rr.RegularCancellationRate, 0), 2) AS PercentIncrease FROM CancellationRates cr JOIN RegularRates rr ON cr.Operating_Airline = rr.Operating_Airline WHERE cr.PeriodType IN ('Thanksgiving', 'Christmas_New_Year') ORDER BY cr.PeriodType, RateDifference DESC;
WITH MonthlyData AS ( SELECT Year, Month, COUNT(*) AS AirTrafficVolume, AVG(DepDelayMinutes) AS AvgDepartureDelay FROM flights.public.flights WHERE (Cancelled IS NULL OR Cancelled = false) AND ((Year = 2019 AND Month <= EXTRACT(MONTH FROM CURRENT_DATE)) OR (Year = 2019 - 1 AND Month > EXTRACT(MONTH FROM CURRENT_DATE))) GROUP BY Year, Month ), CorrelationCalc AS ( SELECT CASE WHEN (COUNT(*) * SUM(AirTrafficVolume * AirTrafficVolume) - SUM(AirTrafficVolume) * SUM(AirTrafficVolume)) * (COUNT(*) * SUM(AvgDepartureDelay * AvgDepartureDelay) - SUM(AvgDepartureDelay) * SUM(AvgDepartureDelay)) = 0 THEN NULL ELSE (COUNT(*) * SUM(AirTrafficVolume * AvgDepartureDelay) - SUM(AirTrafficVolume) * SUM(AvgDepartureDelay)) / SQRT((COUNT(*) * SUM(AirTrafficVolume * AirTrafficVolume) - SUM(AirTrafficVolume) * SUM(AirTrafficVolume)) * (COUNT(*) * SUM(AvgDepartureDelay * AvgDepartureDelay) - SUM(AvgDepartureDelay) * SUM(AvgDepartureDelay))) END AS Correlation FROM MonthlyData ) SELECT md.Year, md.Month, md.AirTrafficVolume, md.AvgDepartureDelay, cc.Correlation AS DelayVolumeCorrelation FROM MonthlyData md CROSS JOIN CorrelationCalc cc ORDER BY md.Year, md.Month;
WITH RouteClassification AS ( SELECT Origin, Dest, OriginCityName, DestCityName, /* Business route indicators */ SUM(CASE WHEN DayOfWeek BETWEEN 1 AND 5 THEN 1 ELSE 0 END) AS WeekdayFlights, SUM(CASE WHEN DayOfWeek BETWEEN 6 AND 7 THEN 1 ELSE 0 END) AS WeekendFlights, SUM(CASE WHEN DepTimeBlk IN ('0500-0559', '0600-0659', '0700-0759', '0800-0859', '0900-0959') THEN 1 ELSE 0 END) AS MorningFlights, SUM(CASE WHEN DepTimeBlk IN ('1600-1659', '1700-1759', '1800-1859', '1900-1959') THEN 1 ELSE 0 END) AS EveningFlights, SUM(CASE WHEN DepTimeBlk IN ('1000-1059', '1100-1159', '1200-1259', '1300-1359', '1400-1459', '1500-1559') THEN 1 ELSE 0 END) AS MiddayFlights, SUM(CASE WHEN DepTimeBlk IN ('2000-2059', '2100-2159', '2200-2259', '2300-2359', '0001-0559','0000-0059', '0100-0159', '0200-0259', '0300-0359', '0400-0459') THEN 1 ELSE 0 END) AS MidnightFlights, /* Major business hub indicator */ SUM(CASE WHEN Origin IN ('JFK', 'LAX', 'ORD', 'DFW', 'SFO', 'BOS', 'ATL', 'EWR', 'IAD', 'SEA') AND Dest IN ('JFK', 'LAX', 'ORD', 'DFW', 'SFO', 'BOS', 'ATL', 'EWR', 'IAD', 'SEA') THEN 1 ELSE 0 END) AS BusinessHubFlights, /* Major leisure destination indicator */ SUM(CASE WHEN Dest IN ('LAS', 'MCO', 'FLL', 'MIA', 'BWI', 'SAN', 'HNL', 'SLC', 'TPA') THEN 1 ELSE 0 END) AS LeisureDestinationFlights FROM flights.public.flights GROUP BY Origin, Dest, OriginCityName, DestCityName HAVING COUNT(*) > 100 /* Only consider routes with sufficient flight volume */ ), BusinessLeisureRoutes AS ( SELECT Origin, Dest, OriginCityName, DestCityName, /* Business-heavy route criteria: 1. High weekday/weekend ratio (> 1.5) 2. High morning/evening concentration (> 50%) 3. Connects major business hubs*/ CASE WHEN (WeekdayFlights * 1.0 / NULLIF(WeekendFlights, 0) > 1.5 AND (MorningFlights + EveningFlights) * 1.0 / (MorningFlights + EveningFlights + MiddayFlights+MidnightFlights) > 0.5 AND BusinessHubFlights > 0) THEN 'Business-Heavy' /* Leisure route criteria: 1. Higher weekend traffic or balanced traffic 2. Higher midday concentration 3. Destinations are leisure hubs */ WHEN (WeekendFlights * 1.0 / NULLIF(WeekdayFlights, 0) > 0.7 AND MiddayFlights * 1.0 / (MorningFlights + EveningFlights + MiddayFlights+MidnightFlights) > 0.4 AND LeisureDestinationFlights > 0) THEN 'Leisure' ELSE 'Mixed' END AS RouteType FROM RouteClassification ), DelayPatterns AS ( SELECT blr.RouteType, CASE WHEN f.DayOfWeek BETWEEN 1 AND 5 THEN 'Weekday' ELSE 'Weekend' END AS DayType, COUNT(*) AS TotalFlights, SUM(CASE WHEN f.DepDel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND(SUM(CASE WHEN f.DepDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS DelayRatePercent, /* Additional metrics for context*/ ROUND(AVG(f.DepDelayMinutes), 2) AS AvgDelayMinutes, ROUND(AVG(f.TaxiOut), 2) AS AvgTaxiOut FROM flights.public.flights f JOIN BusinessLeisureRoutes blr ON f.Origin = blr.Origin AND f.Dest = blr.Dest WHERE f.Cancelled = false AND f.Diverted = false GROUP BY blr.RouteType, CASE WHEN f.DayOfWeek BETWEEN 1 AND 5 THEN 'Weekday' ELSE 'Weekend' END ) SELECT RouteType, DayType, TotalFlights, DelayedFlights, DelayRatePercent, AvgDelayMinutes, AvgTaxiOut, /* Compare to overall average to see relative performance */ ROUND(DelayRatePercent - (SELECT AVG(DelayRatePercent) FROM DelayPatterns), 2) AS DelayRateVsOverallAvg FROM DelayPatterns ORDER BY RouteType, DayType;

----  execution_time, run_quantity
20, 795
25, 490
5, 453
14, 3122
10, 4377
6, 1765
6, 1987
63, 2166
18, 870
10, 388
8, 228
9, 734
4, 998
18, 884
7, 490
6, 897
6, 98
6, 3580
9, 3477
7, 479
4, 132
74, 255